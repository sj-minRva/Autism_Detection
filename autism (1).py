# -*- coding: utf-8 -*-
"""autism.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mZO3RxUsqU1o8dTadNWty6cMZCYlU5P3
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('Toddler Autism dataset July 2018.csv')

# Display the first few rows
print(df.head())

# View column names and data types
print(df.info())

# Check for missing values
print(df.isnull().sum())

# Get basic statistics
print(df.describe())

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df = pd.read_csv('Toddler Autism dataset July 2018.csv')

# Create a LabelEncoder object
le = LabelEncoder()

# Assuming your gender column is named 'Sex', adjust accordingly
df['Sex'] = le.fit_transform(df['Sex'])
print(df.columns)

# Repeat for other categorical columns like 'Ethnicity', 'Jaundice', etc.
df['Ethnicity'] = le.fit_transform(df['Ethnicity'])
df['Jaundice'] = le.fit_transform(df['Jaundice'])
# ... and so on for other columns

from sklearn.preprocessing import StandardScaler

# Define features and target
X = df[['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']]  # Include all 10 questions
 # Replace with actual feature names
y = df['Class/ASD Traits ']  # Replace with the actual target column

# Scale the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier

# Initialize the model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# ... (your existing code) ...

# Create a LabelEncoder object
le = LabelEncoder()

# Assuming your gender column is named 'Sex', adjust accordingly
df['Sex'] = le.fit_transform(df['Sex'])
print(df.columns)

# Repeat for other categorical columns like 'Ethnicity', 'Jaundice', etc.
df['Ethnicity'] = le.fit_transform(df['Ethnicity'])
df['Jaundice'] = le.fit_transform(df['Jaundice'])
# ... and so on for other columns


# Encode the target variable before scaling and splitting
# Assuming your target variable column is named 'Class/ASD Traits '
df['Class/ASD Traits '] = le.fit_transform(df['Class/ASD Traits '])

# ... (continue with your existing code for scaling, splitting, and model training) ...

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# ... (your existing code) ...

# Create a LabelEncoder object
le = LabelEncoder()

# Assuming your gender column is named 'Sex', adjust accordingly
df['Sex'] = le.fit_transform(df['Sex'])
print(df.columns)

# Repeat for other categorical columns like 'Ethnicity', 'Jaundice', etc.
df['Ethnicity'] = le.fit_transform(df['Ethnicity'])
df['Jaundice'] = le.fit_transform(df['Jaundice'])
# ... and so on for other columns


# Encode the target variable before scaling and splitting
# Assuming your target variable column is named 'Class/ASD Traits '
df['Class/ASD Traits '] = le.fit_transform(df['Class/ASD Traits '])

# ... (continue with your existing code for scaling, splitting, and model training) ...

from sklearn.metrics import classification_report, confusion_matrix

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix, classification_report

# Assuming X_test and y_test are the testing data used in your model
y_pred = model.predict(X_test)
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("Classification Report:")
print(classification_report(y_test, y_pred))